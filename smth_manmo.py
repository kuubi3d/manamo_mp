from copy import deepcopy






m = [ 1, 2, 3, 4, 5, 6, 7, 8 ] 
d = { x : y for x, y in zip(m[::2], m[1::2]) }
d = list(d)
print (d)

def printpaths(path, newpath):
    for old, new in zip(path, newpath):
        print('[' + ', '.join('%.3f' % x for x in old) +
              '] -> [' + ', '.join('%.3f' % x for x in new) + ']')


path = [[0, 0], [0, 1], [0, 2], [1, 2], [2, 2], [3, 2], [4, 2], [4, 3], [4, 4]]


def smooth(path, weight_data=0.5, weight_smooth=0.1, tolerance=0.000001):
    
    """
    Creates a smooth path for a n-dimensional series of coordinates.

    Arguments:
        path: List containing coordinates of a path
        weight_data: Float, how much weight to update the data (alpha)
        weight_smooth: Float, how much weight to smooth the coordinates (beta).
        tolerance: Float, how much change per iteration is necessary to keep iterating.

    Output:
        new: List containing smoothed coordinates.
    """

    new = deepcopy(path)
    dims = len(path[0])
    change = tolerance

    while change >= tolerance:
        change = 0.0
        for i in range(1, len(new) - 1):
            for j in range(dims):

                x_i = path[i][j]
                y_i, y_prev, y_next = new[i][j], new[i - 1][j], new[i + 1][j]

                y_i_saved = y_i
                y_i += weight_data * (x_i - y_i) + weight_smooth * (y_next + y_prev - (2 * y_i))
                new[i][j] = y_i

                change += abs(y_i - y_i_saved)


    new = [((20, 150), (20.02, 166.98)), ((20.02, 166.98), (38.0, 168.01)), ((38.0, 168.01), (50.99, 181.01)), ((50.99, 181.01), (52.01, 198.99)),
           ((52.01, 198.99), (67.0, 209.0)), ((67.0, 209.0), (78.0, 223.0)), ((78.0, 223.0), (90.01, 235.99)), ((90.01, 235.99), (108.0, 240.01)),
           ((108.0, 240.01), (121.0, 252.0)), ((121.0, 252.0), (130.0, 268.0)), ((130.0, 268.0), (141.99, 281.0)), ((141.99, 281.0), (144.02, 298.98)),
           ((144.02, 298.98), (162.0, 300.0)), ((162.0, 300.0), (180.0, 300.01)), ((180.0, 300.01), (192.99, 312.01)), ((192.99, 312.01), (197.01, 329.38)),
           ((197.01, 329.38), (210.99, 729.2)), ((210.99, 729.2), (214.01, 326.81)), ((214.01, 326.81), (227.99, 734.19)), ((227.99, 734.19), (229.01, 336.79)),
           ((229.01, 336.79), (241.99, 722.22)), ((241.99, 722.22), (247.01, 334.75)), ((247.01, 334.75), (257.99, 698.65)), ((257.99, 698.65), (259.0, 716.59)),
           ((259.0, 716.59), (262.01, 325.75)), ((262.01, 325.75), (272.0, 687.28)), ((272.0, 687.28), (280.0, 327.71)), ((280.0, 327.71), (288.0, 679.29)),
           ((288.0, 679.29), (297.99, 324.72)), ((297.99, 324.72), (302.0, 690.28)), ((302.0, 690.28), (311.0, 337.71)), ((311.0, 337.71), (320.0, 689.3)),
           ((320.0, 689.3), (327.0, 344.68)), ((327.0, 344.68), (336.0, 682.33)), ((336.0, 682.33), (342.0, 354.65)), ((342.0, 354.65), (352.99, 674.34)),
           ((352.99, 674.34), (354.01, 340.66)), ((354.01, 340.66), (368.99, 667.35)), ((368.99, 667.35), (372.0, 344.31)), ((372.0, 344.31), (376.0, 326.35)),
           ((376.0, 326.35), (383.0, 655.33)), ((383.0, 655.33), (392.99, 320.66)), ((392.99, 320.66), (397.0, 645.33)), ((397.0, 645.33), (405.0, 306.67)),
           ((405.0, 306.67), (413.0, 635.34)), ((413.0, 635.34), (422.99, 304.37)), ((422.99, 304.37), (424.0, 337.95)), ((424.0, 337.95), (427.0, 320.32)),
           ((427.0, 320.32), (428.0, 625.42)), ((428.0, 625.42), (430.0, 355.29)), ((430.0, 355.29), (430.0, 373.22)), ((430.0, 373.22), (432.0, 608.55)),
           ((432.0, 608.55), (436.0, 390.42)), ((436.0, 390.42), (436.0, 590.52)), ((436.0, 590.52), (440.0, 307.52)), ((440.0, 307.52), (446.0, 542.63)),
           ((446.0, 542.63), (447.0, 404.32)), ((447.0, 404.32), (452.0, 584.65)), ((452.0, 584.65), (455.0, 420.3)), ((455.0, 420.3), (455.0, 558.83)),
           ((455.0, 558.83), (460.0, 530.93)), ((460.0, 530.93), (465.0, 435.23)), ((465.0, 435.23), (466.01, 572.81)), ((466.01, 572.81), (474.99, 521.02)),
           ((474.99, 521.02), (477.0, 487.99)), ((477.0, 487.99), (481.0, 443.11)), ((481.0, 443.11), (483.0, 504.91)), ((483.0, 504.91), (490.0, 475.01)),
           ((490.0, 475.01), (492, 458))]  #[492, 458]]


    return new


printpaths(path, smooth(path))

